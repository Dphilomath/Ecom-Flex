type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    stockQuantity: Int!
    category: Category
    reviews: [Review]
}

type Category {
    id: ID!
    name: String!
    description: String
    products: [Product]
}

type User {
    id: ID!
    username: String!
    email: String!
    role: String!
    addresses: [Address]
    cart: Cart
    orders: [Order]
}

type Order {
    id: ID!
    userId: ID!
    orderDate: String!
    status: String!
    totalAmount: Float!
    items: [OrderItem]
    shippingAddress: Address
    paymentInfo: PaymentInfo
}

type OrderItem {
    id: ID!
    orderId: ID!
    productId: ID!
    quantity: Int!
    price: Float!
    product: Product
}

type Address {
    id: ID!
    userId: ID!
    street: String!
    city: String!
    state: String!
    zipCode: String!
    country: String!
    isDefault: Boolean!
}

type PaymentInfo {
    id: ID!
    orderId: ID!
    method: String!
    status: String!
    transactionId: String
    amount: Float!
    timestamp: String!
}

type Cart {
    id: ID!
    userId: ID!
    items: [CartItem]
    totalAmount: Float!
}

type CartItem {
    id: ID!
    cartId: ID!
    productId: ID!
    quantity: Int!
    product: Product
}

type Review {
    id: ID!
    productId: ID!
    userId: ID!
    rating: Int!
    comment: String
    timestamp: String!
    user: User
}

type AuthResponse {
    token: String
    user: User
}

type AuthMode {
    currentMode: String!
}

input ProductInput {
    name: String!
    description: String
    price: Float!
    stockQuantity: Int!
    categoryId: ID
}

input OrderInput {
    userId: ID!
    items: [OrderItemInput]!
    shippingAddressId: ID!
    paymentMethod: String!
}

input OrderItemInput {
    productId: ID!
    quantity: Int!
}

input UserInput {
    username: String!
    email: String!
    password: String!
}

input LoginInput {
    username: String!
    password: String!
}

input AddressInput {
    street: String!
    city: String!
    state: String!
    zipCode: String!
    country: String!
    isDefault: Boolean
}

input CartItemInput {
    productId: ID!
    quantity: Int!
}

input ReviewInput {
    productId: ID!
    rating: Int!
    comment: String
}

type Query {
    # Product queries
    getProductById(id: ID!): Product
    getAllProducts: [Product]
    getProductsByCategory(categoryId: ID!): [Category]
    searchProducts(keyword: String!): [Product]
    
    # Category queries
    getCategoryById(id: ID!): Category
    getAllCategories: [Category]
    
    # Order queries
    getOrderById(id: ID!): Order
    getUserOrders(userId: ID!): [Order]
    
    # User queries
    getCurrentUser: User
    getUserById(id: ID!): User
    getAllUsers: [User]
    
    # Cart queries
    getUserCart: Cart
    
    # Address queries
    getUserAddresses: [Address]
    getAddressById(id: ID!): Address
    
    # Authentication queries
    getCurrentAuthMode: AuthMode
}

type Mutation {
    # Product mutations
    createProduct(product: ProductInput!): Product
    updateProduct(id: ID!, product: ProductInput!): Product
    deleteProduct(id: ID!): Boolean
    
    # Category mutations
    createCategory(name: String!, description: String): Category
    updateCategory(id: ID!, name: String!, description: String): Category
    deleteCategory(id: ID!): Boolean
    
    # Order mutations
    createOrder(order: OrderInput!): Order
    updateOrderStatus(id: ID!, status: String!): Order
    
    # User mutations
    registerUser(user: UserInput!): AuthResponse
    updateUser(id: ID!, user: UserInput!): User
    deleteUser(id: ID!): Boolean
    
    # Authentication mutations
    login(login: LoginInput!): AuthResponse
    logout: Boolean
    switchAuthMode(mode: String!): AuthMode
    
    # Cart mutations
    addItemToCart(item: CartItemInput!): Cart
    updateCartItem(itemId: ID!, quantity: Int!): Cart
    removeCartItem(itemId: ID!): Cart
    clearCart: Cart
    
    # Address mutations
    addAddress(address: AddressInput!): Address
    updateAddress(id: ID!, address: AddressInput!): Address
    deleteAddress(id: ID!): Boolean
    setDefaultAddress(id: ID!): Address
    
    # Review mutations
    addReview(review: ReviewInput!): Review
    updateReview(id: ID!, review: ReviewInput!): Review
    deleteReview(id: ID!): Boolean
    
    # Payment mutations
    processPayment(orderId: ID!, method: String!, amount: Float!): PaymentInfo
} 